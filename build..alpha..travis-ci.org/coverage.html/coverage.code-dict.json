{"/home/travis/build/npmtest/node-npmtest-artyom.js/test.js":"/* istanbul instrument in package npmtest_artyom_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-artyom.js/lib.npmtest_artyom.js.js":"/* istanbul instrument in package npmtest_artyom_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_artyom_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_artyom_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-artyom.js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-artyom.js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_artyom_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_artyom_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_artyom_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_artyom_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_artyom_js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_artyom_js.__dirname + '/lib.npmtest_artyom_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-artyom.js/node_modules/artyom.js/ts/artyom.js":"\"use strict\";\r\n/**\r\n * Internal class to provie an implementation of soundex\r\n */\r\nvar ArtyomInternals = (function () {\r\n    function ArtyomInternals() {\r\n    }\r\n    /**\r\n     * Retrieve a single voice of the browser by it's language code.\r\n     * It will return the first voice available for the language on every device.\r\n     *\r\n     * @param {languageCode} String Language code\r\n     * @returns {Voice}\r\n     */\r\n    ArtyomInternals.getVoice = function (languageCode) {\r\n        var voiceIdentifiersArray = [];\r\n        switch (languageCode) {\r\n            case 'de-DE':\r\n                voiceIdentifiersArray = ArtyomLanguages.german;\r\n                break;\r\n            case 'en-GB':\r\n                voiceIdentifiersArray = ArtyomLanguages.englishGB;\r\n                break;\r\n            case \"pt-BR\":\r\n            case \"pt-PT\":\r\n                voiceIdentifiersArray = ArtyomLanguages.brasilian;\r\n                break;\r\n            case \"ru-RU\":\r\n                voiceIdentifiersArray = ArtyomLanguages.russia;\r\n                break;\r\n            case \"nl-NL\":\r\n                voiceIdentifiersArray = ArtyomLanguages.holand;\r\n                break;\r\n            case 'es-ES':\r\n                voiceIdentifiersArray = ArtyomLanguages.spanish;\r\n                break;\r\n            case 'en-US':\r\n                voiceIdentifiersArray = ArtyomLanguages.englishUSA;\r\n                break;\r\n            case 'fr-FR':\r\n                voiceIdentifiersArray = ArtyomLanguages.france;\r\n                break;\r\n            case 'it-IT':\r\n                voiceIdentifiersArray = ArtyomLanguages.italian;\r\n                break;\r\n            case 'ja-JP':\r\n                voiceIdentifiersArray = ArtyomLanguages.japanese;\r\n                break;\r\n            case 'id-ID':\r\n                voiceIdentifiersArray = ArtyomLanguages.indonesia;\r\n                break;\r\n            case 'hi-IN':\r\n                voiceIdentifiersArray = ArtyomLanguages.hindi;\r\n                break;\r\n            case 'pl-PL':\r\n                voiceIdentifiersArray = ArtyomLanguages.polski;\r\n                break;\r\n            case 'zh-CN':\r\n                voiceIdentifiersArray = ArtyomLanguages.mandarinChinese;\r\n                break;\r\n            case 'zh-HK':\r\n                voiceIdentifiersArray = ArtyomLanguages.cantoneseChinese;\r\n                break;\r\n            case 'native':\r\n                voiceIdentifiersArray = ArtyomLanguages.native;\r\n                break;\r\n            default:\r\n                console.warn(\"The given language '\" + languageCode + \"' for artyom is not supported yet. Using native voice instead\");\r\n                break;\r\n        }\r\n        var voice = undefined;\r\n        var voices = speechSynthesis.getVoices();\r\n        var voicesLength = voiceIdentifiersArray.length;\r\n        for (var i = 0; i < voicesLength; i++) {\r\n            var foundVoice = voices.filter(function (voice) {\r\n                return ((voice.name == voiceIdentifiersArray[i]) || (voice.lang == voiceIdentifiersArray[i]));\r\n            })[0];\r\n            if (foundVoice) {\r\n                voice = foundVoice;\r\n                break;\r\n            }\r\n        }\r\n        return voice;\r\n    };\r\n    ;\r\n    /**\r\n     * Soundex algorithm implementation\r\n     * @param {string} s\r\n     * @return {string}\r\n     */\r\n    ArtyomInternals.soundex = function (s) {\r\n        var a = s.toLowerCase().split(''), f = a.shift(), r = '', codes = {\r\n            a: '',\r\n            e: '',\r\n            i: '',\r\n            o: '',\r\n            u: '',\r\n            b: 1,\r\n            f: 1,\r\n            p: 1,\r\n            v: 1,\r\n            c: 2,\r\n            g: 2,\r\n            j: 2,\r\n            k: 2,\r\n            q: 2,\r\n            s: 2,\r\n            x: 2,\r\n            z: 2,\r\n            d: 3,\r\n            t: 3,\r\n            l: 4,\r\n            m: 5,\r\n            n: 5,\r\n            r: 6\r\n        };\r\n        r = f +\r\n            a\r\n                .map(function (v, i, a) {\r\n                return codes[v];\r\n            })\r\n                .filter(function (v, i, a) {\r\n                return ((i === 0) ? v !== codes[f] : v !== a[i - 1]);\r\n            })\r\n                .join('');\r\n        return (r + '000').slice(0, 4).toUpperCase();\r\n    };\r\n    return ArtyomInternals;\r\n}());\r\n/**\r\n * Helper methods for Artyom core implementation\r\n */\r\nvar ArtyomHelpers = (function () {\r\n    function ArtyomHelpers() {\r\n    }\r\n    /**\r\n     * Determine if the current browser is Google Chrome (static method)\r\n     * @return {boolean}\r\n     */\r\n    ArtyomHelpers.isChrome = function () {\r\n        return navigator.userAgent.indexOf(\"Chrome\") !== -1;\r\n    };\r\n    /**\r\n     * Determine if the current device is a mobile (static method)\r\n     * @return {boolean}\r\n     */\r\n    ArtyomHelpers.isMobileDevice = function () {\r\n        return (navigator.userAgent.match(/Android/i) ||\r\n            navigator.userAgent.match(/webOS/i) ||\r\n            navigator.userAgent.match(/iPhone/i) ||\r\n            navigator.userAgent.match(/iPad/i) ||\r\n            navigator.userAgent.match(/iPod/i) ||\r\n            navigator.userAgent.match(/BlackBerry/i) ||\r\n            navigator.userAgent.match(/Windows Phone/i));\r\n    };\r\n    /**\r\n     * Trigger an event\r\n     * @param {string} name\r\n     * @param {any} param\r\n     * @return {event}\r\n     */\r\n    ArtyomHelpers.artyomTriggerEvent = function (name, param) {\r\n        var event = new CustomEvent(name, { 'detail': param });\r\n        document.dispatchEvent(event);\r\n        return event;\r\n    };\r\n    ;\r\n    return ArtyomHelpers;\r\n}());\r\nvar ArtyomGlobalEvents = {\r\n    ERROR: \"ERROR\",\r\n    SPEECH_SYNTHESIS_START: \"SPEECH_SYNTHESIS_START\",\r\n    SPEECH_SYNTHESIS_END: \"SPEECH_SYNTHESIS_END\",\r\n    TEXT_RECOGNIZED: \"TEXT_RECOGNIZED\",\r\n    COMMAND_RECOGNITION_START: \"COMMAND_RECOGNITION_START\",\r\n    COMMAND_RECOGNITION_END: \"COMMAND_RECOGNITION_END\",\r\n    COMMAND_MATCHED: \"COMMAND_MATCHED\",\r\n    NOT_COMMAND_MATCHED: \"NOT_COMMAND_MATCHED\"\r\n};\r\nvar ArtyomLanguages = {\r\n    german: [\"Google Deutsch\", \"de-DE\", \"de_DE\"],\r\n    spanish: [\"Google español\", \"es-ES\", \"es_ES\", \"es-MX\", \"es_MX\"],\r\n    italian: [\"Google italiano\", \"it-IT\", \"it_IT\"],\r\n    japanese: [\"Google 日本人\", \"ja-JP\", \"ja_JP\"],\r\n    englishUSA: [\"Google US English\", \"en-US\", \"en_US\"],\r\n    englishGB: [\"Google UK English Male\", \"Google UK English Female\", \"en-GB\", \"en_GB\"],\r\n    brasilian: [\"Google português do Brasil\", \"pt-PT\", \"pt-BR\", \"pt_PT\", \"pt_BR\"],\r\n    russia: [\"Google русский\", \"ru-RU\", \"ru_RU\"],\r\n    holand: [\"Google Nederlands\", \"nl-NL\", \"nl_NL\"],\r\n    france: [\"Google français\", \"fr-FR\", \"fr_FR\"],\r\n    polski: [\"Google polski\", \"pl-PL\", \"pl_PL\"],\r\n    indonesia: [\"Google Bahasa Indonesia\", \"id-ID\", \"id_ID\"],\r\n    hindi: [\"Google हिन्दी\", \"hi-IN\", \"hi_IN\"],\r\n    mandarinChinese: [\"Google 普通话（中国大陆）\", \"zh-CN\", \"zh_CN\"],\r\n    cantoneseChinese: [\"Google 粤語（香港）\", \"zh-HK\", \"zh_HK\"],\r\n    native: [\"native\"]\r\n};\r\nvar ArtyomJsImpl = (function () {\r\n    function ArtyomJsImpl() {\r\n        var _this = this;\r\n        this.artyomCommands = [];\r\n        this.artyomGarbageCollector = [];\r\n        this.device = {\r\n            isChrome: function () { return ArtyomHelpers.isChrome(); },\r\n            isMobile: function () { return !!ArtyomHelpers.isMobileDevice(); }\r\n        };\r\n        this.getVoices = function () {\r\n            return (window['speechSynthesis']).getVoices();\r\n        };\r\n        this.getAvailableCommands = function () {\r\n            return _this.artyomCommands;\r\n        };\r\n        this.initialize = function (config) {\r\n            if (typeof (config) !== \"object\") {\r\n                return Promise.reject(\"You must give the configuration for start artyom properly.\");\r\n            }\r\n            if (config.hasOwnProperty(\"lang\")) {\r\n                _this.artyomVoice = ArtyomInternals.getVoice(config.lang);\r\n                _this.artyomProperties.lang = config.lang;\r\n            }\r\n            if (config.hasOwnProperty(\"continuous\")) {\r\n                if (config.continuous) {\r\n                    _this.artyomProperties.continuous = true;\r\n                    _this.artyomFlags.restartRecognition = true;\r\n                }\r\n                else {\r\n                    _this.artyomProperties.continuous = false;\r\n                    _this.artyomFlags.restartRecognition = false;\r\n                }\r\n            }\r\n            if (config.hasOwnProperty(\"speed\")) {\r\n                _this.artyomProperties.speed = config.speed;\r\n            }\r\n            if (config.hasOwnProperty(\"soundex\")) {\r\n                _this.artyomProperties.soundex = config.soundex;\r\n            }\r\n            if (config.hasOwnProperty(\"executionKeyword\")) {\r\n                _this.artyomProperties.executionKeyword = config.executionKeyword;\r\n            }\r\n            if (config.hasOwnProperty(\"obeyKeyword\")) {\r\n                _this.artyomProperties.obeyKeyword = config.obeyKeyword;\r\n            }\r\n            if (config.hasOwnProperty(\"volume\")) {\r\n                _this.artyomProperties.volume = config.volume;\r\n            }\r\n            if (config.hasOwnProperty(\"listen\")) {\r\n                _this.artyomProperties.listen = config.listen;\r\n            }\r\n            if (config.hasOwnProperty(\"debug\")) {\r\n                _this.artyomProperties.debug = config.debug;\r\n            }\r\n            else {\r\n                console.warn(\"The initialization doesn't provide how the debug mode should be handled. Is recommendable to set this value either to true or false.\");\r\n            }\r\n            if (config.mode) {\r\n                _this.artyomProperties.mode = config.mode;\r\n            }\r\n            if (_this.artyomProperties.listen === true) {\r\n                var hey_1 = _this.artyomHey;\r\n                return new Promise(function (resolve, reject) {\r\n                    hey_1(resolve, reject);\r\n                });\r\n            }\r\n            return Promise.resolve(undefined);\r\n        };\r\n        this.fatality = function () {\r\n            try {\r\n                // if config is continuous mode, deactivate anyway.\r\n                _this.artyomFlags.restartRecognition = false;\r\n                _this.artyomWSR.stop();\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n                return false;\r\n            }\r\n        };\r\n        this.addCommands = function (param) {\r\n            var _processObject = function (obj) {\r\n                if (obj.hasOwnProperty(\"indexes\")) {\r\n                    _this.artyomCommands.push(obj);\r\n                }\r\n                else {\r\n                    console.error(\"The following command doesn't provide any index to execute :\");\r\n                    console.dir(obj);\r\n                }\r\n            };\r\n            if (param instanceof Array) {\r\n                var paramLength = param.length;\r\n                for (var i = 0; i < paramLength; i++) {\r\n                    _processObject(param[i]);\r\n                }\r\n            }\r\n            else {\r\n                _processObject(param);\r\n            }\r\n            return true;\r\n        };\r\n        this.removeCommands = function (identifier) {\r\n            var toDelete = [];\r\n            if (typeof (identifier) === \"string\") {\r\n                var commandsLength = _this.artyomCommands.length;\r\n                for (var i = 0; i < commandsLength; i++) {\r\n                    var command = _this.artyomCommands[i];\r\n                    if (command.indexes.indexOf(identifier)) {\r\n                        toDelete.push(i);\r\n                    }\r\n                }\r\n                var toDeleteLength = toDelete.length;\r\n                for (var o = 0; o < toDeleteLength; o++) {\r\n                    _this.artyomCommands.splice(o, 1);\r\n                }\r\n            }\r\n            return toDelete;\r\n        };\r\n        this.emptyCommands = function () {\r\n            return _this.artyomCommands = [];\r\n        };\r\n        this.shutUp = function () {\r\n            if ('speechSynthesis' in window) {\r\n                do {\r\n                    (window['speechSynthesis']).cancel();\r\n                } while ((window['speechSynthesis']).pending === true);\r\n            }\r\n            _this.artyomProperties.speaking = false;\r\n            _this.clearGarbageCollection();\r\n        };\r\n        this.getProperties = function () {\r\n            return _this.artyomProperties;\r\n        };\r\n        this.when = function (event, action) {\r\n            return document.addEventListener(event, function (e) {\r\n                action(e.detail);\r\n            }, false);\r\n        };\r\n        this.getLanguage = function () {\r\n            return _this.artyomProperties.lang;\r\n        };\r\n        this.artyomTalk = function (text, actualChunk, totalChunks, callbacks) {\r\n            var msg = new SpeechSynthesisUtterance();\r\n            msg.text = text;\r\n            msg.volume = _this.artyomProperties.volume;\r\n            msg.rate = _this.artyomProperties.speed;\r\n            // Select the voice according to the selected\r\n            if (typeof (_this.artyomVoice) != \"undefined\") {\r\n                var availableVoice = undefined;\r\n                if (callbacks) {\r\n                    // If the language to speak has been forced, use it\r\n                    if (callbacks.hasOwnProperty(\"lang\")) {\r\n                        availableVoice = ArtyomInternals.getVoice(callbacks.lang);\r\n                    }\r\n                    else {\r\n                        availableVoice = ArtyomInternals.getVoice(_this.artyomProperties.lang);\r\n                    }\r\n                }\r\n                else {\r\n                    // Otherwise speak in the language of the initialization\r\n                    availableVoice = ArtyomInternals.getVoice(_this.artyomProperties.lang);\r\n                }\r\n                // If is a mobile device, provide only the language code in the lang property i.e \"es_ES\"\r\n                if (_this.device.isMobile()) {\r\n                    // Try to set the voice only if exists, otherwise don't use anything to use the native voice\r\n                    if (availableVoice) {\r\n                        msg.lang = availableVoice.lang;\r\n                    }\r\n                }\r\n                else {\r\n                    msg.voice = availableVoice;\r\n                }\r\n            }\r\n            else {\r\n                console.warn(\"Using default voice because no voice was selected during the initialization probably because there were no voices available. Initialize artyom after the onload event of the window.\");\r\n            }\r\n            // If is first text chunk (onStart)\r\n            if (actualChunk == 1) {\r\n                msg.addEventListener('start', function () {\r\n                    // Set artyom is talking\r\n                    _this.artyomProperties.speaking = true;\r\n                    // Trigger the onSpeechSynthesisStart event\r\n                    _this.debug(\"Event reached : \" + ArtyomGlobalEvents.SPEECH_SYNTHESIS_START);\r\n                    // The original library dismiss the second parameter\r\n                    ArtyomHelpers.artyomTriggerEvent(ArtyomGlobalEvents.SPEECH_SYNTHESIS_START);\r\n                    // Trigger the onStart callback if exists\r\n                    if (callbacks) {\r\n                        if (typeof (callbacks.onStart) == \"function\") {\r\n                            callbacks.onStart.call(msg);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            // If is final text chunk (onEnd)\r\n            if ((actualChunk) >= totalChunks) {\r\n                msg.addEventListener('end', function () {\r\n                    // Set artyom is talking\r\n                    _this.artyomProperties.speaking = false;\r\n                    // Trigger the onSpeechSynthesisEnd event\r\n                    _this.debug(\"Event reached : \" + ArtyomGlobalEvents.SPEECH_SYNTHESIS_END);\r\n                    ArtyomHelpers.artyomTriggerEvent(ArtyomGlobalEvents.SPEECH_SYNTHESIS_END);\r\n                    // Trigger the onEnd callback if exists.\r\n                    if (callbacks) {\r\n                        if (typeof (callbacks.onEnd) == \"function\") {\r\n                            callbacks.onEnd.call(msg);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            // Notice how many chunks were processed for the given text.\r\n            _this.debug((actualChunk) + \" text chunk processed succesfully out of \" + totalChunks);\r\n            // Important : Save the SpeechSynthesisUtterance object in memory, otherwise it will get lost\r\n            // thanks to the Garbage collector of javascript\r\n            _this.artyomGarbageCollector.push(msg);\r\n            (window['speechSynthesis']).speak(msg);\r\n        };\r\n        this.splitStringByChunks = function (input, chunk_length) {\r\n            var prev = 0;\r\n            var output = [];\r\n            input = input || \"\";\r\n            chunk_length = chunk_length || 100;\r\n            var curr = chunk_length;\r\n            while (input[curr]) {\r\n                if (input[curr++] == ' ') {\r\n                    output.push(input.substring(prev, curr));\r\n                    prev = curr;\r\n                    curr += chunk_length;\r\n                }\r\n            }\r\n            output.push(input.substr(prev));\r\n            return output;\r\n        };\r\n        this.say = function (message, callbacks) {\r\n            var artyom_say_max_chunk_length = 115;\r\n            if (_this.speechSupported()) {\r\n                if (typeof (message) === 'string') {\r\n                    if (message.length > 0) {\r\n                        var definitive_1 = [];\r\n                        // If the providen text is long, proceed to split it\r\n                        if (message.length > artyom_say_max_chunk_length) {\r\n                            // Split the given text by pause reading characters [\",\",\":\",\";\",\".\"] to provide a natural reading feeling.\r\n                            var naturalReading = message.split(/,|:|\\.|;/);\r\n                            naturalReading.forEach(function (chunk, index) {\r\n                                // If the sentence is too long and could block the API, split it to prevent any errors.\r\n                                if (chunk.length > artyom_say_max_chunk_length) {\r\n                                    // Process the providen string into strings (withing an array) of maximum aprox. 115 characters to prevent any error with the API.\r\n                                    var temp_processed = _this.splitStringByChunks(chunk, artyom_say_max_chunk_length);\r\n                                    // Add items of the processed sentence into the definitive chunk.\r\n                                    definitive_1.push.apply(definitive_1, temp_processed);\r\n                                }\r\n                                else {\r\n                                    // Otherwise just add the sentence to being spoken.\r\n                                    definitive_1.push(chunk);\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            definitive_1.push(message);\r\n                        }\r\n                        // Clean any empty item in array\r\n                        definitive_1 = definitive_1.filter(function (e) { return e; });\r\n                        // Finally proceed to talk the chunks and assign the callbacks.\r\n                        definitive_1.forEach(function (chunk, index) {\r\n                            var numberOfChunk = (index + 1);\r\n                            if (chunk) {\r\n                                _this.artyomTalk(chunk, numberOfChunk, definitive_1.length, callbacks);\r\n                            }\r\n                        });\r\n                        // Save the spoken text into the lastSay object of artyom\r\n                        _this.artyomProperties.helpers.lastSay = {\r\n                            text: message,\r\n                            date: new Date()\r\n                        };\r\n                    }\r\n                    else {\r\n                        console.warn(\"Artyom expects a string to say ... none given.\");\r\n                    }\r\n                }\r\n                else {\r\n                    console.warn(\"Artyom expects a string to say ... \" + typeof (message) + \" given.\");\r\n                }\r\n            }\r\n        };\r\n        this.repeatLastSay = function (returnObject) {\r\n            var last = _this.artyomProperties.helpers.lastSay;\r\n            if (returnObject) {\r\n                return last;\r\n            }\r\n            else {\r\n                if (last != null) {\r\n                    _this.say(last.text);\r\n                }\r\n            }\r\n        };\r\n        this.speechSupported = function () {\r\n            return 'speechSynthesis' in window;\r\n        };\r\n        this.recognizingSupported = function () {\r\n            return 'webkitSpeechRecognition' in window;\r\n        };\r\n        this.simulateInstruction = function (sentence) {\r\n            if ((!sentence) || (typeof (sentence) !== \"string\")) {\r\n                console.warn(\"Cannot execute a non string command\");\r\n                return false;\r\n            }\r\n            var foundCommand = _this.artyomExecute(sentence); // Command founded object\r\n            if (foundCommand.result && foundCommand.objeto) {\r\n                if (foundCommand.objeto.smart) {\r\n                    _this.debug('Smart command matches with simulation, executing', \"info\");\r\n                    foundCommand.objeto.action(foundCommand.indice, foundCommand.wildcard.item, foundCommand.wildcard.full);\r\n                }\r\n                else {\r\n                    _this.debug('Command matches with simulation, executing', \"info\");\r\n                    foundCommand.objeto.action(foundCommand.indice); // Execute Normal command\r\n                }\r\n                return true;\r\n            }\r\n            else {\r\n                console.warn(\"No command founded trying with \" + sentence);\r\n                return false;\r\n            }\r\n        };\r\n        this.artyomExecute = function (voice) {\r\n            if (!voice) {\r\n                console.warn(\"Internal error: Execution of empty command\");\r\n                return {\r\n                    result: false,\r\n                    indice: null,\r\n                    objeto: null,\r\n                    wildcard: {\r\n                        item: null,\r\n                        full: voice\r\n                    }\r\n                };\r\n            }\r\n            var wildcard;\r\n            _this.debug(\">> \" + voice);\r\n            // @3 Artyom needs time to think that\r\n            var artyomCommandsLength = _this.artyomCommands.length;\r\n            for (var i = 0; i < artyomCommandsLength; i++) {\r\n                var instruction = _this.artyomCommands[i];\r\n                var opciones = instruction.indexes;\r\n                var encontrado = -1;\r\n                var optionsLength = opciones.length;\r\n                for (var c = 0; c < optionsLength; c++) {\r\n                    var opcion = opciones[c];\r\n                    if (!instruction.smart) {\r\n                        continue; // Jump if is not smart command\r\n                    }\r\n                    if (opcion instanceof RegExp) {\r\n                        // If RegExp matches \r\n                        if (opcion.test(voice)) {\r\n                            _this.debug(\">> REGEX \" + opcion.toString() + \" MATCHED AGAINST \" + voice + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\r\n                            encontrado = c;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (opcion.indexOf(\"*\") !== -1) {\r\n                            // Logic here\r\n                            var grupo = opcion.split(\"*\");\r\n                            if (grupo.length > 2) {\r\n                                console.warn(\"Artyom found a smart command with \" + (grupo.length - 1) + \" wildcards. Artyom only support 1 wildcard for each command. Sorry\");\r\n                                continue;\r\n                            }\r\n                            // Start smart command\r\n                            var before = grupo[0];\r\n                            var latter = grupo[1];\r\n                            // Wildcard in the end\r\n                            //if ((latter === \"\") || (latter === \" \")) {\r\n                            if (latter.trim() === \"\") {\r\n                                if ((voice.indexOf(before) !== -1) || ((voice.toLowerCase()).indexOf(before.toLowerCase()) !== -1)) {\r\n                                    var wildy = voice.replace(before, '');\r\n                                    wildy = (wildy.toLowerCase()).replace(before.toLowerCase(), '');\r\n                                    wildcard = wildy;\r\n                                    encontrado = c;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if ((voice.indexOf(before) != -1) || ((voice.toLowerCase()).indexOf(before.toLowerCase()) != -1)) {\r\n                                    if ((voice.indexOf(latter) != -1) || ((voice.toLowerCase()).indexOf(latter.toLowerCase()) != -1)) {\r\n                                        var wildy = voice.replace(before, '').replace(latter, '');\r\n                                        wildy = (wildy.toLowerCase())\r\n                                            .replace(before.toLowerCase(), '')\r\n                                            .replace(latter.toLowerCase(), '');\r\n                                        wildy = (wildy.toLowerCase()).replace(latter.toLowerCase(), '');\r\n                                        wildcard = wildy;\r\n                                        encontrado = c;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            console.warn(\"Founded command marked as SMART but have no wildcard in the indexes, remove the SMART for prevent extensive memory consuming or add the wildcard *\");\r\n                        }\r\n                    }\r\n                    if ((encontrado >= 0)) {\r\n                        encontrado = c;\r\n                        break;\r\n                    }\r\n                }\r\n                if (encontrado >= 0) {\r\n                    ArtyomHelpers.artyomTriggerEvent(ArtyomGlobalEvents.COMMAND_MATCHED);\r\n                    return {\r\n                        result: true,\r\n                        indice: encontrado,\r\n                        objeto: instruction,\r\n                        wildcard: {\r\n                            item: wildcard,\r\n                            full: voice\r\n                        }\r\n                    };\r\n                }\r\n            } // End @3\r\n            // @1 Search for IDENTICAL matches in the commands if nothing matches start with a index match in commands\r\n            artyomCommandsLength = _this.artyomCommands.length;\r\n            for (var i = 0; i < artyomCommandsLength; i++) {\r\n                var instruction = _this.artyomCommands[i];\r\n                var opciones = instruction.indexes;\r\n                var encontrado = -1;\r\n                // Execution of match with identical commands\r\n                for (var c = 0; c < opciones.length; c++) {\r\n                    var opcion = opciones[c];\r\n                    if (instruction.smart) {\r\n                        continue; // Jump wildcard commands\r\n                    }\r\n                    if ((voice === opcion)) {\r\n                        _this.debug(\">> MATCHED FULL EXACT OPTION \" + opcion + \" AGAINST \" + voice + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\r\n                        encontrado = c;\r\n                        break;\r\n                    }\r\n                    else if ((voice.toLowerCase() === opcion.toLowerCase())) {\r\n                        _this.debug(\">> MATCHED OPTION CHANGING ALL TO LOWERCASE \" + opcion + \" AGAINST \" + voice + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\r\n                        encontrado = c;\r\n                        break;\r\n                    }\r\n                }\r\n                if (encontrado >= 0) {\r\n                    ArtyomHelpers.artyomTriggerEvent(ArtyomGlobalEvents.COMMAND_MATCHED);\r\n                    return {\r\n                        result: true,\r\n                        indice: encontrado,\r\n                        objeto: instruction,\r\n                        wildcard: null\r\n                    };\r\n                }\r\n            } // End @1\r\n            // Step 3 Commands recognition. If the command is not smart, and any of the commands match exactly then try to find a command in all the quote.\r\n            artyomCommandsLength = _this.artyomCommands.length;\r\n            for (var i = 0; i < artyomCommandsLength; i++) {\r\n                var instruction = _this.artyomCommands[i];\r\n                var opciones = instruction.indexes;\r\n                var encontrado = -1;\r\n                // Execution of match with index\r\n                var optionsLength = opciones.length;\r\n                for (var c = 0; c < optionsLength; c++) {\r\n                    if (instruction.smart) {\r\n                        continue; // Jump wildcard commands\r\n                    }\r\n                    var opcion = opciones[c];\r\n                    if ((voice.indexOf(opcion) >= 0)) {\r\n                        _this.debug(\">> MATCHED INDEX EXACT OPTION \" + opcion + \" AGAINST \" + voice + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\r\n                        encontrado = c;\r\n                        break;\r\n                    }\r\n                    else if (((voice.toLowerCase()).indexOf(opcion.toLowerCase()) >= 0)) {\r\n                        _this.debug(\">> MATCHED INDEX OPTION CHANGING ALL TO LOWERCASE \" + opcion + \" AGAINST \" + voice + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\r\n                        encontrado = c;\r\n                        break;\r\n                    }\r\n                }\r\n                if (encontrado >= 0) {\r\n                    ArtyomHelpers.artyomTriggerEvent(ArtyomGlobalEvents.COMMAND_MATCHED);\r\n                    return {\r\n                        result: true,\r\n                        indice: encontrado,\r\n                        objeto: instruction,\r\n                        wildcard: null\r\n                    };\r\n                }\r\n            } // End Step 3\r\n            /**\r\n             * If the soundex options is enabled, proceed to process the commands in case that any of the previous\r\n            * ways of processing (exact, lowercase and command in quote) didn't match anything.\r\n            * Based on the soundex algorithm match a command if the spoken text is similar to any of the artyom commands.\r\n            * Example:\r\n            * If you have a command with \"Open Wallmart\" and \"Open Willmar\" is recognized, the open wallmart command will be triggered.\r\n            * soundex(\"Open Wallmart\") == soundex(\"Open Willmar\") <= true\r\n            *\r\n            */\r\n            if (_this.artyomProperties.soundex) {\r\n                artyomCommandsLength = _this.artyomCommands.length;\r\n                for (var i = 0; i < artyomCommandsLength; i++) {\r\n                    var instruction = _this.artyomCommands[i];\r\n                    var opciones = instruction.indexes;\r\n                    var encontrado = -1;\r\n                    var optionsLength = opciones.length;\r\n                    for (var c = 0; c < optionsLength; c++) {\r\n                        var opcion = opciones[c];\r\n                        if (instruction.smart) {\r\n                            continue; // Jump wildcard commands\r\n                        }\r\n                        if (ArtyomInternals.soundex(voice) == ArtyomInternals.soundex(opcion)) {\r\n                            _this.debug(\">> Matched Soundex command '\" + opcion + \"' AGAINST '\" + voice + \"' with index \" + c, \"info\");\r\n                            encontrado = c;\r\n                            ArtyomHelpers.artyomTriggerEvent(ArtyomGlobalEvents.COMMAND_MATCHED);\r\n                            return {\r\n                                result: true,\r\n                                indice: encontrado,\r\n                                objeto: instruction,\r\n                                wildcard: null\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            _this.debug(\"Event reached : \" + ArtyomGlobalEvents.NOT_COMMAND_MATCHED);\r\n            ArtyomHelpers.artyomTriggerEvent(ArtyomGlobalEvents.NOT_COMMAND_MATCHED);\r\n            return {\r\n                result: false,\r\n                indice: null,\r\n                objeto: null,\r\n                wildcard: null\r\n            };\r\n        };\r\n        this.debug = function (stringEvent, traceLevel) {\r\n            if (_this.artyomProperties.debug === true) {\r\n                switch (traceLevel) {\r\n                    case 'error':\r\n                        console.log(' %cArtyom.js ' + \" \" + stringEvent, 'background: #C12127; color: #FFFFFF');\r\n                        break;\r\n                    case 'warn':\r\n                        console.warn(stringEvent);\r\n                        break;\r\n                    case 'info':\r\n                        console.log(' %cArtyom.js: ' + \" \" + stringEvent, 'background: #4285F4; color: #FFFFFF');\r\n                        break;\r\n                    default:\r\n                        console.log(' %cArtyom.js %c ' + \" \" + stringEvent, 'background: #005454; color: #BFF8F8', 'color:black;');\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n        this.redirectRecognizedTextOutput = function (action) {\r\n            if (typeof (action) != \"function\") {\r\n                console.warn(\"Expected function to handle the recognized text ...\");\r\n                return false;\r\n            }\r\n            _this.artyomProperties.helpers.redirectRecognizedTextOutput = action;\r\n            return true;\r\n        };\r\n        this.sayRandom = function (data) {\r\n            if (data instanceof Array) {\r\n                var index = Math.floor(Math.random() * data.length);\r\n                _this.say(data[index]);\r\n                return {\r\n                    text: data[index],\r\n                    index: index\r\n                };\r\n            }\r\n            else {\r\n                console.error(\"Random quotes must be in an array !\");\r\n                return null;\r\n            }\r\n        };\r\n        this.newDictation = function (settings) {\r\n            if (!_this.recognizingSupported()) {\r\n                console.error(\"SpeechRecognition is not supported in this browser\");\r\n                return false;\r\n            }\r\n            var dictado = new webkitSpeechRecognition();\r\n            dictado.continuous = true;\r\n            dictado.interimResults = true;\r\n            dictado.lang = _this.artyomProperties.lang;\r\n            dictado.onresult = function (event) {\r\n                var temporal = \"\";\r\n                var interim = \"\";\r\n                var resultsLength = event.results.length;\r\n                for (var i = 0; i < resultsLength; ++i) {\r\n                    if (event.results[i].isFinal) {\r\n                        temporal += event.results[i][0].transcript;\r\n                    }\r\n                    else {\r\n                        interim += event.results[i][0].transcript;\r\n                    }\r\n                }\r\n                if (settings.onResult) {\r\n                    settings.onResult(interim, temporal);\r\n                }\r\n            };\r\n            return new function () {\r\n                var dictation = dictado;\r\n                var flagStartCallback = true;\r\n                var flagRestart = false;\r\n                this.onError = null;\r\n                this.start = function () {\r\n                    if (settings.continuous === true) {\r\n                        flagRestart = true;\r\n                    }\r\n                    dictation.onstart = function () {\r\n                        if (typeof (settings.onStart) === \"function\") {\r\n                            if (flagStartCallback === true) {\r\n                                settings.onStart();\r\n                            }\r\n                        }\r\n                    };\r\n                    dictation.onend = function () {\r\n                        if (flagRestart === true) {\r\n                            flagStartCallback = false;\r\n                            dictation.start();\r\n                        }\r\n                        else {\r\n                            flagStartCallback = true;\r\n                            if (typeof (settings.onEnd) === \"function\") {\r\n                                settings.onEnd();\r\n                            }\r\n                        }\r\n                    };\r\n                    dictation.start();\r\n                };\r\n                this.stop = function () {\r\n                    flagRestart = false;\r\n                    dictation.stop();\r\n                };\r\n                if (typeof (settings.onError) === \"function\") {\r\n                    dictation.onerror = settings.onError;\r\n                }\r\n            };\r\n        };\r\n        this.newPrompt = function (config) {\r\n            if (typeof (config) !== \"object\") {\r\n                console.error(\"Expected the prompt configuration.\");\r\n            }\r\n            var copyActualCommands = Object.assign([], _this.artyomCommands);\r\n            _this.emptyCommands();\r\n            var promptCommand = {\r\n                description: 'Setting the artyom commands only for the prompt. The commands will be restored after the prompt finishes',\r\n                indexes: config.options,\r\n                smart: (config.smart) ? true : false,\r\n                action: function (i, wildcard) {\r\n                    _this.artyomCommands = copyActualCommands;\r\n                    var toExe = config.onMatch(i, wildcard);\r\n                    if (typeof (toExe) !== \"function\") {\r\n                        console.error(\"onMatch function expects a returning function to be executed\");\r\n                        return;\r\n                    }\r\n                    toExe();\r\n                }\r\n            };\r\n            _this.addCommands(promptCommand);\r\n            if (typeof (config.beforePrompt) !== \"undefined\") {\r\n                config.beforePrompt();\r\n            }\r\n            _this.say(config.question, {\r\n                onStart: function () {\r\n                    if (typeof (config.onStartPrompt) !== \"undefined\") {\r\n                        config.onStartPrompt();\r\n                    }\r\n                },\r\n                onEnd: function () {\r\n                    if (typeof (config.onEndPrompt) !== \"undefined\") {\r\n                        config.onEndPrompt();\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        this.artyomHey = function (resolve, reject) {\r\n            var start_timestamp;\r\n            var artyom_is_allowed;\r\n            /**\r\n             * On mobile devices the recognized text is always thrown twice.\r\n             * By setting the following configuration, fixes the issue\r\n             */\r\n            if (ArtyomHelpers.isMobileDevice) {\r\n                _this.artyomWSR.continuous = false;\r\n                _this.artyomWSR.interimResults = false;\r\n                _this.artyomWSR.maxAlternatives = 1;\r\n            }\r\n            else {\r\n                _this.artyomWSR.continuous = true;\r\n                _this.artyomWSR.interimResults = true;\r\n            }\r\n            _this.artyomWSR.lang = _this.artyomProperties.lang;\r\n            _this.artyomWSR.onstart = function () {\r\n                _this.debug(\"Event reached : \" + ArtyomGlobalEvents.COMMAND_RECOGNITION_START);\r\n                ArtyomHelpers.artyomTriggerEvent(ArtyomGlobalEvents.COMMAND_RECOGNITION_START);\r\n                _this.artyomProperties.recognizing = true;\r\n                artyom_is_allowed = true;\r\n                resolve();\r\n            };\r\n            /**\r\n             * Handle all artyom posible exceptions\r\n            * @param {type} event\r\n            * @returns {undefined}\r\n            */\r\n            _this.artyomWSR.onerror = function (event) {\r\n                reject(event.error);\r\n                // Dispath error globally (artyom.when)\r\n                ArtyomHelpers.artyomTriggerEvent(ArtyomGlobalEvents.ERROR, {\r\n                    code: event.error\r\n                });\r\n                if (event.error === 'audio-capture') {\r\n                    artyom_is_allowed = false;\r\n                }\r\n                if (event.error === 'not-allowed') {\r\n                    artyom_is_allowed = false;\r\n                    if (event.timeStamp - start_timestamp < 100) {\r\n                        ArtyomHelpers.artyomTriggerEvent(ArtyomGlobalEvents.ERROR, {\r\n                            code: \"info-blocked\",\r\n                            message: \"Artyom needs the permision of the microphone, is blocked.\"\r\n                        });\r\n                    }\r\n                    else {\r\n                        ArtyomHelpers.artyomTriggerEvent(ArtyomGlobalEvents.ERROR, {\r\n                            code: \"info-denied\",\r\n                            message: \"Artyom needs the permision of the microphone, is denied\"\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            /**\r\n             * Check if continuous mode is active and restart the recognition. Throw events too.\r\n            */\r\n            _this.artyomWSR.onend = function () {\r\n                if (_this.artyomFlags.restartRecognition === true) {\r\n                    if (artyom_is_allowed === true) {\r\n                        _this.artyomWSR.start();\r\n                        _this.debug(\"Continuous mode enabled, restarting\", \"info\");\r\n                    }\r\n                    else {\r\n                        console.error(\"Verify the microphone and check for the table of errors in sdkcarlos.github.io/sites/artyom.html to solve your problem. If you want to give your user a message when an error appears add an artyom listener\");\r\n                    }\r\n                    ArtyomHelpers.artyomTriggerEvent(ArtyomGlobalEvents.COMMAND_RECOGNITION_END, {\r\n                        code: \"continuous_mode_enabled\",\r\n                        message: \"OnEnd event reached with continuous mode\"\r\n                    });\r\n                }\r\n                else {\r\n                    ArtyomHelpers.artyomTriggerEvent(ArtyomGlobalEvents.COMMAND_RECOGNITION_END, {\r\n                        code: \"continuous_mode_disabled\",\r\n                        message: \"OnEnd event reached without continuous mode\"\r\n                    });\r\n                }\r\n                _this.artyomProperties.recognizing = false;\r\n            };\r\n            /**\r\n             * Declare the processor dinamycally according to the mode of artyom to increase the performance.\r\n            */\r\n            var onResultProcessor;\r\n            // Process the recognition in normal mode\r\n            if (_this.artyomProperties.mode === \"normal\") {\r\n                onResultProcessor = function (event) {\r\n                    if (!_this.artyomCommands.length) {\r\n                        _this.debug(\"No commands to process in normal mode.\");\r\n                        return;\r\n                    }\r\n                    ArtyomHelpers.artyomTriggerEvent(ArtyomGlobalEvents.TEXT_RECOGNIZED);\r\n                    var cantidadResultados = event.results.length;\r\n                    for (var i = event.resultIndex; i < cantidadResultados; ++i) {\r\n                        var identificated = event.results[i][0].transcript;\r\n                        if (event.results[i].isFinal) {\r\n                            var comando = _this.artyomExecute(identificated.trim());\r\n                            // Redirect the output of the text if necessary\r\n                            if (typeof (_this.artyomProperties.helpers.redirectRecognizedTextOutput) === \"function\") {\r\n                                _this.artyomProperties.helpers.redirectRecognizedTextOutput(identificated, true);\r\n                            }\r\n                            if ((comando.result !== false) && (_this.artyomProperties.recognizing === true)) {\r\n                                _this.debug(\"<< Executing Matching Recognition in normal mode >>\", \"info\");\r\n                                _this.artyomWSR.stop();\r\n                                _this.artyomProperties.recognizing = false;\r\n                                // Execute the command if smart\r\n                                if (comando.wildcard) {\r\n                                    comando.objeto.action(comando.indice, comando.wildcard.item, comando.wildcard.full);\r\n                                }\r\n                                else {\r\n                                    comando.objeto.action(comando.indice);\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                        else {\r\n                            // Redirect output when necesary\r\n                            if (typeof (_this.artyomProperties.helpers.redirectRecognizedTextOutput) === \"function\") {\r\n                                _this.artyomProperties.helpers.redirectRecognizedTextOutput(identificated, false);\r\n                            }\r\n                            if (typeof (_this.artyomProperties.executionKeyword) === \"string\") {\r\n                                if (identificated.indexOf(_this.artyomProperties.executionKeyword) !== -1) {\r\n                                    var comando = _this.artyomExecute(identificated.replace(_this.artyomProperties.executionKeyword, '').trim());\r\n                                    if ((comando.result !== false) && (_this.artyomProperties.recognizing === true)) {\r\n                                        _this.debug(\"<< Executing command ordered by ExecutionKeyword >>\", 'info');\r\n                                        _this.artyomWSR.stop();\r\n                                        _this.artyomProperties.recognizing = false;\r\n                                        // Executing Command Action\r\n                                        if (comando.wildcard) {\r\n                                            comando.objeto.action(comando.indice, comando.wildcard.item, comando.wildcard.full);\r\n                                        }\r\n                                        else {\r\n                                            comando.objeto.action(comando.indice);\r\n                                        }\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            _this.debug(\"Normal mode : \" + identificated);\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n            // Process the recognition in quick mode\r\n            if (_this.artyomProperties.mode === \"quick\") {\r\n                onResultProcessor = function (event) {\r\n                    if (!_this.artyomCommands.length) {\r\n                        _this.debug(\"No commands to process.\");\r\n                        return;\r\n                    }\r\n                    ArtyomHelpers.artyomTriggerEvent(ArtyomGlobalEvents.TEXT_RECOGNIZED);\r\n                    var cantidadResultados = event.results.length;\r\n                    for (var i = event.resultIndex; i < cantidadResultados; ++i) {\r\n                        var identificated = event.results[i][0].transcript;\r\n                        if (!event.results[i].isFinal) {\r\n                            var comando = _this.artyomExecute(identificated.trim());\r\n                            // Redirect output when necesary\r\n                            if (typeof (_this.artyomProperties.helpers.redirectRecognizedTextOutput) === \"function\") {\r\n                                _this.artyomProperties.helpers.redirectRecognizedTextOutput(identificated, true);\r\n                            }\r\n                            if ((comando.result !== false) && (_this.artyomProperties.recognizing == true)) {\r\n                                _this.debug(\"<< Executing Matching Recognition in quick mode >>\", \"info\");\r\n                                _this.artyomWSR.stop();\r\n                                _this.artyomProperties.recognizing = false;\r\n                                // Executing Command Action\r\n                                if (comando.wildcard) {\r\n                                    comando.objeto.action(comando.indice, comando.wildcard.item);\r\n                                }\r\n                                else {\r\n                                    comando.objeto.action(comando.indice);\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                        else {\r\n                            var comando = _this.artyomExecute(identificated.trim());\r\n                            // Redirect output when necesary\r\n                            if (_this.artyomProperties.helpers && typeof (_this.artyomProperties.helpers.redirectRecognizedTextOutput) === \"function\") {\r\n                                _this.artyomProperties.helpers.redirectRecognizedTextOutput(identificated, false);\r\n                            }\r\n                            if ((comando.result !== false) && (_this.artyomProperties.recognizing == true)) {\r\n                                _this.debug(\"<< Executing Matching Recognition in quick mode >>\", \"info\");\r\n                                _this.artyomWSR.stop();\r\n                                _this.artyomProperties.recognizing = false;\r\n                                // Executing Command Action\r\n                                if (comando.wildcard) {\r\n                                    if (comando.objeto && typeof (comando.indice) === 'number') {\r\n                                        comando.objeto.action(comando.indice, comando.wildcard.item);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if (comando.objeto && typeof (comando.indice) === 'number') {\r\n                                        comando.objeto.action(comando.indice);\r\n                                    }\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                        _this.debug(\"Quick mode : \" + identificated);\r\n                    }\r\n                };\r\n            }\r\n            // Process the recognition in remote mode\r\n            if (_this.artyomProperties.mode == \"remote\") {\r\n                onResultProcessor = function (event) {\r\n                    ArtyomHelpers.artyomTriggerEvent(ArtyomGlobalEvents.TEXT_RECOGNIZED);\r\n                    var cantidadResultados = event.results.length;\r\n                    if (_this.artyomProperties.helpers && typeof (_this.artyomProperties.helpers.remoteProcessorHandler) !== \"function\") {\r\n                        return _this.debug(\"The remoteProcessorService is undefined.\", \"warn\");\r\n                    }\r\n                    for (var i = event.resultIndex; i < cantidadResultados; ++i) {\r\n                        var identificated = event.results[i][0].transcript;\r\n                        if (_this.artyomProperties.helpers) {\r\n                            _this.artyomProperties.helpers.remoteProcessorHandler({\r\n                                text: identificated,\r\n                                isFinal: event.results[i].isFinal\r\n                            });\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n            /**\r\n             * Process the recognition event with the previously declared processor function.\r\n            */\r\n            _this.artyomWSR.onresult = function (event) {\r\n                if (_this.artyomProperties.obeying) {\r\n                    onResultProcessor(event);\r\n                }\r\n                else {\r\n                    // Handle obeyKeyword if exists and artyom is not obeying\r\n                    if (!_this.artyomProperties.obeyKeyword) {\r\n                        return;\r\n                    }\r\n                    var temporal = \"\";\r\n                    var interim = \"\";\r\n                    var resultsLength = event.results.length;\r\n                    for (var i = 0; i < resultsLength; ++i) {\r\n                        if (event.results[i].final) {\r\n                            temporal += event.results[i][0].transcript;\r\n                        }\r\n                        else {\r\n                            interim += event.results[i][0].transcript;\r\n                        }\r\n                    }\r\n                    _this.debug(\"Artyom is not obeying\", \"warn\");\r\n                    // If the obeyKeyword is found in the recognized text enable command recognition again\r\n                    if (((interim).indexOf(_this.artyomProperties.obeyKeyword) > -1) || (temporal).indexOf(_this.artyomProperties.obeyKeyword) > -1) {\r\n                        _this.artyomProperties.obeying = true;\r\n                    }\r\n                }\r\n            };\r\n            if (_this.artyomProperties.recognizing) {\r\n                _this.artyomWSR.stop();\r\n                _this.debug(\"Event reached : \" + ArtyomGlobalEvents.COMMAND_RECOGNITION_END);\r\n                ArtyomHelpers.artyomTriggerEvent(ArtyomGlobalEvents.COMMAND_RECOGNITION_END);\r\n            }\r\n            else {\r\n                try {\r\n                    _this.artyomWSR.start();\r\n                }\r\n                catch (e) {\r\n                    ArtyomHelpers.artyomTriggerEvent(ArtyomGlobalEvents.ERROR, {\r\n                        code: \"recognition_overlap\",\r\n                        message: \"A webkitSpeechRecognition instance has been started while there's already running. Is recommendable to restart the Browser\"\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        this.getNativeApi = function () {\r\n            return _this.artyomWSR;\r\n        };\r\n        this.isRecognizing = function () {\r\n            return !!_this.artyomProperties.recognizing;\r\n        };\r\n        this.isSpeaking = function () {\r\n            return !!_this.artyomProperties.speaking;\r\n        };\r\n        this.clearGarbageCollection = function () {\r\n            // Review this return, because it will always return true\r\n            return _this.artyomGarbageCollector = [];\r\n        };\r\n        this.getGarbageCollection = function () {\r\n            return _this.artyomGarbageCollector;\r\n        };\r\n        this.dontObey = function () {\r\n            // Comprobar tipo devuelto -> siempre false?\r\n            return _this.artyomProperties.obeying = false;\r\n        };\r\n        this.obey = function () {\r\n            // Check returned type ? alway true\r\n            return _this.artyomProperties.obeying = true;\r\n        };\r\n        this.isObeying = function () {\r\n            return !!_this.artyomProperties.obeying;\r\n        };\r\n        this.getVersion = function () {\r\n            return \"1.0.5\";\r\n        };\r\n        this.on = function (indexes, smart) {\r\n            return {\r\n                then: function (action) {\r\n                    var command = {\r\n                        indexes: indexes,\r\n                        action: action,\r\n                        smart: false\r\n                    };\r\n                    if (smart) {\r\n                        command.smart = true;\r\n                    }\r\n                    _this.addCommands(command);\r\n                }\r\n            };\r\n        };\r\n        this.remoteProcessorService = function (action) {\r\n            if (_this.artyomProperties.helpers) {\r\n                _this.artyomProperties.helpers.remoteProcessorHandler = action;\r\n            }\r\n            return true;\r\n        };\r\n        // Load browser voices as soon as possible\r\n        if (window.hasOwnProperty('speechSynthesis')) {\r\n            speechSynthesis.getVoices();\r\n        }\r\n        if (window.hasOwnProperty('webkitSpeechRecognition')) {\r\n            var webkitSpeechRecognition_1 = window.webkitSpeechRecognition;\r\n            this.artyomWSR = new webkitSpeechRecognition_1();\r\n        }\r\n        // Default values\r\n        this.artyomProperties = {\r\n            lang: 'en-GB',\r\n            recognizing: false,\r\n            continuous: false,\r\n            speed: 1,\r\n            volume: 1,\r\n            listen: false,\r\n            mode: 'normal',\r\n            debug: false,\r\n            helpers: {\r\n                redirectRecognizedTextOutput: null,\r\n                remoteProcessorHandler: null,\r\n                lastSay: null\r\n            },\r\n            executionKeyword: null,\r\n            obeyKeyword: null,\r\n            speaking: false,\r\n            obeying: true,\r\n            soundex: false\r\n        };\r\n        // Recognition\r\n        this.artyomFlags = {\r\n            restartRecognition: false\r\n        };\r\n        // Default voice\r\n        this.artyomVoice = {\r\n            \"default\": false,\r\n            lang: \"en-GB\",\r\n            localService: false,\r\n            name: \"Google UK English Male\",\r\n            voiceURI: \"Google UK English Male\"\r\n        };\r\n    }\r\n    return ArtyomJsImpl;\r\n}());\r\nexports.ArtyomJsImpl = ArtyomJsImpl;\r\n/**\r\n * Artyom.js requires webkitSpeechRecognition and speechSynthesis APIs\r\n *\r\n * @license MIT\r\n * @version 1.0.4\r\n * @copyright 2017 Our Code World All Rights Reserved.\r\n * @author semagarcia (TypeScript version) - https://github.com/semagarcia\r\n * @see https://sdkcarlos.github.io/sites/artyom.html\r\n * @see http://docs.ourcodeworld.com/projects/artyom-js\r\n */\r\nvar ArtyomBuilder = (function () {\r\n    function ArtyomBuilder() {\r\n        var artyom;\r\n        var artyomVoice = 'Google UK English Male';\r\n        var artyom_garbage_collector = [];\r\n        var artyomCommands = [];\r\n    }\r\n    ArtyomBuilder.getInstance = function () {\r\n        if (!ArtyomBuilder.instance) {\r\n            // Protect the instance to be inherited\r\n            ArtyomBuilder.instance = Object.preventExtensions(new ArtyomJsImpl());\r\n        }\r\n        // Return the instance\r\n        return ArtyomBuilder.instance;\r\n    };\r\n    return ArtyomBuilder;\r\n}());\r\nexports.ArtyomBuilder = ArtyomBuilder;\r\n"}